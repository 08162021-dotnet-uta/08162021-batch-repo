# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# trigger:
# - main

variables:
  pathtoproj: variable1
  pathtoproject: demos\StoreDemoWithJSAndApi\StoreDemoUi

pr: none
trigger: 
  branches:
    include:
    - main
  paths:
    include:
    - $(pathtoproject)

pool:
  vmImage: ubuntu-latest


stages:
- stage: stage1_build
  jobs:
  - job: buildjob1
    steps:
    - bash: echo this is how you use a variable => $(pathtoproj)
      displayName: 'Run a one-line script'
    # - task: DotNetCoreCLI@2
    #   inputs:
    #     command: 'build'
    #     projects: '$(pathtoproj)'
    #     arguments: 'arghere'
    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'
  - job: buildjob2
    displayName: Job2
    steps:
    - script:
        echo this is script2.job2.
      displayName: 'Run a multi-line script'


- stage: stage2_test
  jobs:
  - job: testjob1
    steps:
    - bash: echo stage2.step1 is how you use a variable => $(pathtoproj)
      displayName: 'Run a one-line script'
    - script:
        echo this is script2.job2.
    - bash: echo $(Build.BuildId)
      displayName: 'ran the stage2.script2'

- stage: stage3_deploy
  jobs:
  - job: deployjob1
    steps:
    - bash: echo stage2.step1 is how you use a variable => $(pathtoproj)
      displayName: 'Run a one-line script'
    - script:
        echo this is script2.stagedeploy.job2.
      displayName: 'ran the stage2.script2'
    - bash: echo $(Build.BuildNumber)
    - bash: echo $(Build.BuildId)
    - bash: echo $(Build.SourceBranchNme)
    - bash: echo $(Build.SourcesDirectory)
    - bash: echo $(System.DefaultWorkingDirectory)
    - bash: ls $(System.DefaultWorkingDirectory)
    - bash: ls -R $(System.DefaultWorkingDirectory)
    - bash: echo $(Build.ArtifactStagingDirectory)
  dependsOn: []